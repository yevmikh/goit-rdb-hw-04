//////////////// p1 
--  a
 CREATE SCHEMA LibraryManagement;
 USE LibraryManagement;

-- b
 CREATE TABLE authors(
 author_id INT AUTO_INCREMENT PRIMARY KEY,
 author_name VARCHAR(50)
 ); 

-- c 
 CREATE TABLE genres(
  genre_id INT AUTO_INCREMENT PRIMARY KEY,
  genre_name VARCHAR(50)
  ); 
 
-- d 
 CREATE TABLE books(
	 book_id INT AUTO_INCREMENT PRIMARY KEY,
     title VARCHAR(50),
     publication_year YEAR,
     author_id INT, 
     genre_id INT,
     FOREIGN KEY( author_id ) REFERENCES  authors( author_id ) ON DELETE SET NULL, 
     FOREIGN KEY( genre_id ) REFERENCES genres( genre_id ) ON DELETE SET NULL 
 );

-- e 
 CREATE TABLE users (
 	user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50),
    email VARCHAR(50)
 );

-- f
CREATE TABLE borrowed_books (
borrow_id INT AUTO_INCREMENT PRIMARY KEY,
book_id INT,
user_id INT,
FOREIGN KEY ( book_id ) REFERENCES books ( book_id )  ON DELETE SET NULL,
FOREIGN KEY ( user_id ) REFERENCES users ( user_id )  ON DELETE SET NULL,
borrow_date DATE,
return_date DATE
)

//////////////// p2 

INSERT INTO authors(author_name)
	VALUES('Gibson'), ('Konig');

INSERT INTO genres(genre_name)
	VALUE('History'), ('Poem');

INSERT INTO books(title, publication_year, author_id, genre_id)
	VALUE('Apocalypto', 2006, 1, 1), ('Anders als gedacht', 2008, 2, 2);

INSERT INTO users(username, email)
	VALUE('B.Simpson','b-simpson@gmail.com'), ('L.Simpson','l-simpson@gmail.com');
    
INSERT INTO borrowed_books(book_id, user_id, borrow_date, reurn_date)
	VALUE(1, 1, '2024-05-25', '2024-05-30'), (2, 2, '2024-06-06', '2024-06-09');

//////////////// p3 

USE hw03;
CREATE TABLE joined_table AS 
SELECT 
	orders.id order_id,
    orders.date order_date,
    
    order_details.quantity order_quantity,
    
    products.name product_name,
	products.id product_id,
    products.unit product_unit,
    products.price product_price,
    
	categories.name categories,
    categories.description category_description, 
    
	suppliers.name supplier,
    suppliers.contact supplier_contact,
    suppliers.address supplier_address,
	suppliers.city supplier_city,
	suppliers.postal_code supplier_postal_code,
	suppliers.country supplier_country,
	suppliers.phone supplier_phone,	
    
    shippers.name shipper,
    shippers.phone shipper_phone,  
    
	employees.last_name employee_last_name,
    employees.first_name employee_first_name,
    employees.birthdate employee_birthdate,
    employees.photo employee_photo,
    employees.notes employee_notes,
    
    customers.name customer,
    customers.contact customer_contact,
    customers.address customer_address,
    customers.city customer_city,
    customers.postal_code customer_postal_code,
    customers.country customer_country
    
    FROM orders 
    INNER JOIN order_details ON orders.id = order_details.order_id
    INNER JOIN products ON products.id = order_details.product_id
    INNER JOIN categories ON categories.id = products.category_id
	INNER JOIN suppliers ON suppliers.id = products.supplier_id
    INNER JOIN shippers ON shippers.id = orders.shipper_id
    INNER JOIN employees ON employees.employee_id = orders.employee_id
    INNER JOIN customers ON customers.id = orders.customer_id

//////////////// p4-1 

USE hw03;
SELECT COUNT(*) AS total_orders
FROM joined_table

//////////////// p4-2 

USE hw03;
CREATE TABLE joined_table AS 
SELECT 
	orders.id order_id,
    orders.date order_date,
    
    order_details.quantity order_quantity,
    
    products.name product_name,
	products.id product_id,
    products.unit product_unit,
    products.price product_price,
    
	categories.name categories,
    categories.description category_description, 
    
	suppliers.name supplier,
    suppliers.contact supplier_contact,
    suppliers.address supplier_address,
	suppliers.city supplier_city,
	suppliers.postal_code supplier_postal_code,
	suppliers.country supplier_country,
	suppliers.phone supplier_phone,	
    
    shippers.name shipper,
    shippers.phone shipper_phone,  
    
	employees.last_name employee_last_name,
    employees.first_name employee_first_name,
    employees.birthdate employee_birthdate,
    employees.photo employee_photo,
    employees.notes employee_notes,
    
    customers.name customer,
    customers.contact customer_contact,
    customers.address customer_address,
    customers.city customer_city,
    customers.postal_code customer_postal_code,
    customers.country customer_country
    
    FROM orders 
    INNER JOIN order_details ON orders.id = order_details.order_id
    LEFT JOIN products ON products.id = order_details.product_id
    RIGHT JOIN categories ON categories.id = products.category_id
	INNER JOIN suppliers ON suppliers.id = products.supplier_id
    INNER JOIN shippers ON shippers.id = orders.shipper_id
    INNER JOIN employees ON employees.employee_id = orders.employee_id
    INNER JOIN customers ON customers.id = orders.customer_id
    
-- I think if changing from INNER JOIN to LEFT or RIGHT JOIN didn't alter the query results, 
-- it likely means that all referenced rows in the join condition were present in both tables, causing all join types to return the same rows.

//////////////// p4-3

USE hw03;
SELECT * FROM joined_table
WHERE employee_id > 3 AND employee_id <= 10 

//////////////// p4-4 

USE hw03;
SELECT categories, ROUND(AVG(order_quantity)) AS average_quantity, COUNT(*) AS total_orders 
FROM joined_table
WHERE employee_id > 3 AND employee_id <= 10 
GROUP BY categories

//////////////// p4-5 

USE hw03;
SELECT categories, ROUND(AVG(order_quantity)) AS average_quantity, COUNT(*) AS total_orders 
FROM joined_table
WHERE employee_id > 3 AND employee_id <= 10 
GROUP BY categories
HAVING average_quantity > 21

//////////////// p4-6 

USE hw03;
SELECT categories, ROUND(AVG(order_quantity)) AS average_quantity, COUNT(*) AS total_orders 
FROM joined_table
WHERE employee_id > 3 AND employee_id <= 10 
GROUP BY categories
HAVING average_quantity > 21
ORDER BY total_orders DESC

//////////////// p4-7 

USE hw03;
SELECT categories, ROUND(AVG(order_quantity)) AS average_quantity, COUNT(*) AS total_orders 
FROM joined_table
WHERE employee_id > 3 AND employee_id <= 10 
GROUP BY categories
HAVING average_quantity > 21
ORDER BY total_orders DESC
LIMIT 4 
OFFSET 1 



